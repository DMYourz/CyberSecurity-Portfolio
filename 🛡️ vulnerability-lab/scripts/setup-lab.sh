#!/bin/bash

# Vulnerability Lab Automated Setup Script
# This script automates the initial setup of the vulnerability assessment lab

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   error "This script should not be run as root. Please run as a regular user with sudo privileges."
   exit 1
fi

# Check system requirements
check_requirements() {
    log "Checking system requirements..."
    
    # Check RAM (minimum 8GB)
    RAM_GB=$(free -g | awk '/^Mem:/{print $2}')
    if [ "$RAM_GB" -lt 8 ]; then
        warning "System has ${RAM_GB}GB RAM. Minimum 8GB recommended."
    else
        success "RAM check passed: ${RAM_GB}GB available"
    fi
    
    # Check disk space (minimum 50GB)
    DISK_GB=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
    if [ "$DISK_GB" -lt 50 ]; then
        warning "Available disk space: ${DISK_GB}GB. Minimum 50GB recommended."
    else
        success "Disk space check passed: ${DISK_GB}GB available"
    fi
    
    # Check internet connectivity
    if ping -c 1 google.com &> /dev/null; then
        success "Internet connectivity verified"
    else
        error "No internet connection. Please check network settings."
        exit 1
    fi
}

# Update system packages
update_system() {
    log "Updating system packages..."
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y curl wget git unzip net-tools htop
    success "System packages updated"
}

# Create lab directory structure
create_directories() {
    log "Creating lab directory structure..."
    
    LAB_DIR="$HOME/vulnerability-lab"
    mkdir -p "$LAB_DIR"/{logs,scans,configs,reports,scripts,documentation}
    
    # Set proper permissions
    chmod 755 "$LAB_DIR"
    chmod 755 "$LAB_DIR"/*
    
    success "Lab directories created at $LAB_DIR"
}

# Install Docker
install_docker() {
    log "Installing Docker..."
    
    if command -v docker &> /dev/null; then
        success "Docker already installed"
        return
    fi
    
    sudo apt install -y docker.io
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # Add user to docker group
    sudo usermod -aG docker $USER
    
    success "Docker installed successfully"
    warning "Please logout and login again for Docker group changes to take effect"
}

# Download Wazuh installer
download_wazuh() {
    log "Downloading Wazuh installer..."
    
    cd "$HOME/vulnerability-lab"
    
    if [ -f "wazuh-install.sh" ]; then
        success "Wazuh installer already downloaded"
        return
    fi
    
    curl -sO https://packages.wazuh.com/4.12/wazuh-install.sh
    chmod +x wazuh-install.sh
    
    success "Wazuh installer downloaded"
}

# Download Nessus
download_nessus() {
    log "Downloading Nessus Essentials..."
    
    DOWNLOADS_DIR="$HOME/downloads"
    mkdir -p "$DOWNLOADS_DIR"
    cd "$DOWNLOADS_DIR"
    
    NESSUS_FILE="Nessus-10.9.2-ubuntu1604_amd64.deb"
    
    if [ -f "$NESSUS_FILE" ]; then
        success "Nessus already downloaded"
        return
    fi
    
    wget "https://www.tenable.com/downloads/api/v2/pages/nessus/files/$NESSUS_FILE"
    
    success "Nessus downloaded to $DOWNLOADS_DIR"
}

# Create verification script
create_verification_script() {
    log "Creating verification script..."
    
    cat > "$HOME/vulnerability-lab/scripts/verify-lab.sh" << 'EOF'
#!/bin/bash

# Lab Environment Verification Script

echo "=== Vulnerability Lab Verification ==="
echo "Timestamp: $(date)"
echo

# Check Wazuh services
echo "1. Checking Wazuh services..."
if sudo systemctl is-active --quiet wazuh-manager; then
    echo "   ✓ Wazuh Manager: Running"
else
    echo "   ✗ Wazuh Manager: Not running"
fi

if sudo systemctl is-active --quiet wazuh-indexer; then
    echo "   ✓ Wazuh Indexer: Running"
else
    echo "   ✗ Wazuh Indexer: Not running"
fi

if sudo systemctl is-active --quiet wazuh-dashboard; then
    echo "   ✓ Wazuh Dashboard: Running"
else
    echo "   ✗ Wazuh Dashboard: Not running"
fi

# Check DVWA container
echo
echo "2. Checking DVWA container..."
if sudo docker ps | grep -q dvwa; then
    echo "   ✓ DVWA Container: Running"
    DVWA_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080)
    if [ "$DVWA_STATUS" = "200" ]; then
        echo "   ✓ DVWA Web Interface: Accessible"
    else
        echo "   ✗ DVWA Web Interface: Not accessible (HTTP $DVWA_STATUS)"
    fi
else
    echo "   ✗ DVWA Container: Not running"
fi

# Check Nessus service
echo
echo "3. Checking Nessus service..."
if sudo systemctl is-active --quiet nessusd; then
    echo "   ✓ Nessus Service: Running"
    NESSUS_STATUS=$(curl -k -s -o /dev/null -w "%{http_code}" https://localhost:8834)
    if [ "$NESSUS_STATUS" = "200" ]; then
        echo "   ✓ Nessus Web Interface: Accessible"
    else
        echo "   ✗ Nessus Web Interface: Not accessible (HTTP $NESSUS_STATUS)"
    fi
else
    echo "   ✗ Nessus Service: Not running"
fi

# Check network ports
echo
echo "4. Checking network ports..."
if sudo netstat -tlnp | grep -q ":443 "; then
    echo "   ✓ Port 443 (Wazuh): Listening"
else
    echo "   ✗ Port 443 (Wazuh): Not listening"
fi

if sudo netstat -tlnp | grep -q ":8080 "; then
    echo "   ✓ Port 8080 (DVWA): Listening"
else
    echo "   ✗ Port 8080 (DVWA): Not listening"
fi

if sudo netstat -tlnp | grep -q ":8834 "; then
    echo "   ✓ Port 8834 (Nessus): Listening"
else
    echo "   ✗ Port 8834 (Nessus): Not listening"
fi

echo
echo "=== Verification Complete ==="
EOF

    chmod +x "$HOME/vulnerability-lab/scripts/verify-lab.sh"
    success "Verification script created"
}

# Create installation summary
create_summary() {
    log "Creating installation summary..."
    
    cat > "$HOME/vulnerability-lab/INSTALLATION_SUMMARY.md" << EOF
# Vulnerability Lab Installation Summary

## Installation Date
$(date)

## System Information
- **OS**: $(lsb_release -d | cut -f2)
- **Kernel**: $(uname -r)
- **RAM**: $(free -h | awk '/^Mem:/ {print $2}')
- **Disk Space**: $(df -h / | awk 'NR==2 {print $4}') available

## Components Status
- [x] System packages updated
- [x] Lab directories created
- [x] Docker installed
- [x] Wazuh installer downloaded
- [x] Nessus installer downloaded
- [x] Verification script created

## Next Steps
1. Install Wazuh SIEM:
   \`\`\`bash
   cd ~/vulnerability-lab
   sudo bash ./wazuh-install.sh -a
   \`\`\`

2. Deploy DVWA container:
   \`\`\`bash
   sudo docker run -d --name dvwa -p 8080:80 vulnerables/web-dvwa
   \`\`\`

3. Install Nessus:
   \`\`\`bash
   cd ~/downloads
   sudo dpkg -i Nessus-10.9.2-ubuntu1604_amd64.deb
   sudo systemctl start nessusd
   \`\`\`

4. Verify installation:
   \`\`\`bash
   ~/vulnerability-lab/scripts/verify-lab.sh
   \`\`\`

## Access URLs
- **Wazuh Dashboard**: https://localhost:443
- **DVWA**: http://localhost:8080
- **Nessus**: https://localhost:8834

## Documentation
- **Complete Walkthrough**: documentation/lab-walkthrough.md
- **Research Notes**: documentation/research-notes.md
- **Installation Guide**: documentation/installation-guide.md

## Support
If you encounter issues, check the troubleshooting section in the lab walkthrough.
EOF

    success "Installation summary created"
}

# Main execution
main() {
    echo -e "${BLUE}"
    echo "=================================================="
    echo "  Vulnerability Lab Automated Setup"
    echo "=================================================="
    echo -e "${NC}"
    
    check_requirements
    update_system
    create_directories
    install_docker
    download_wazuh
    download_nessus
    create_verification_script
    create_summary
    
    echo
    success "Lab setup completed successfully!"
    echo
    echo "Next steps:"
    echo "1. Review the installation summary: ~/vulnerability-lab/INSTALLATION_SUMMARY.md"
    echo "2. Follow the detailed walkthrough: ~/vulnerability-lab/documentation/lab-walkthrough.md"
    echo "3. If you installed Docker for the first time, logout and login again"
    echo
    warning "Remember to register for Nessus Essentials license at https://www.tenable.com/products/nessus/nessus-essentials"
}

# Run main function
main "$@"

